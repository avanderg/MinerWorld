To trigger my world changing event, you click somewhere in the world on a background tile. When the event is triggered,
the background in a 3x3 square, centered on the location of the click, is turned into brown dirt and a wyvern spawns.
The wyvern follows the A* algorithim but it can travel diagonally and through ore. The wyvern then hunts miners and
turns them into piles of ash when it catches them. If a miner is inside the affected square at the time of the
mouseclick, it is turned into a freeze that hunts oreblobs and turns them into miners. I chose to have this behavior
so the program can run for a little longer, if there are freezes to create new miners, there can be more targets for
the dragons to hunt. I created a new abstract class called "HunterEntity" that describes a moving entity that hunts
another one. Oreblobs, freezes, and wyverns all fall under this abstract class. I also handle the world changing events
inside the WorldModel class (ie the changing of the background and changing miners to freezes). To add a new entity
in the old code would require changes throughout many classes and a lot of copy and pasting similar methods to the new
entity. Since the code has been refactored, all I had to do was create an abstract class and the new concrete class with
 a couple methods inside the new classes. I found it relatively easy to add in the new entities; the hardest part was
figuring out how the mouse event worked.
